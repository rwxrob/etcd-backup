#!/bin/bash

## usage: etcd-backup DIR
##
## etcd-backup creates and validates a backup snapshot of a single
## specific etcd database associated with a Kubernetes cluster and
## saves it into the specified DIR with the file name
## etcd-backup-TSTAMP.db where TSTAMP is replaced with an ISO8601
## time stamp in UTC such that files will properly sort lexically
## within the directory. The script also optionally removes any
## backups older than the LIMIT_DAYS_TO_KEEP (0 for none). The
## script can be called from cron or from Icinga2.
##
## Note that this script is only a portion of a full disaster
## recovery strategy depending on the type of applications running
## in the cluster.
##
## Consider calling this script redundantly for the same etcd
## instance more than once for different target filesystems to
## limit risk associated with filesystem failure, particularly
## when storing to NAS mounts.

# change the following to match your cluster

CACERT=/etc/kubernetes/pki/etcd/ca.crt
CERT=/etc/kubernetes/pki/etcd/server.crt
KEY=/etc/kubernetes/pki/etcd/server.key
PORT=2379
HOSTS=(control1 control2 control3)
LIMIT_DAYS_TO_KEEP=7

# ------------------ limit changes to anything below -----------------

DIR=$1
test -z "$DIR" && echo "usage: $0 DIR" && exit 1

export ETCDCTL_API=3
TSTAMP=$(date -u +%Y%m%dT%H%M%SZ)

ENDPOINTS=$(printf "https://%s:$PORT," "${HOSTS[@]}")
ENDPOINTS=${ENDPOINTS%,}

leader=$(etcdctl \
  --endpoints="$ENDPOINTS" \
  --cacert="$CACERT" \
  --cert="$CERT" \
  --key="$KEY" \
  endpoint status | grep true)
leader=${leader%%,*}

before () {
  local limit=$1
  local fmt=$2
  [[ -n "$limit" && "$fmt" =~ \* ]] || return 1
  local dir=${fmt%/*}
  local name=${fmt##*/}
  local path=${fmt//\*/$limit}
  while IFS= read -r line; do
    [[ "$line" < "$path" ]] && echo "$line"
  done < <(find "$dir" -maxdepth 1 -type f -name "$name")
}

snapshot () {
  local dir=$1
  test -z "$dir" && return 2
  test -d "$dir" || mkdir -p "$dir"
  etcdctl \
    --endpoints="$leader" \
    --cacert="$CACERT" \
    --cert="$CERT" \
    --key="$KEY" \
    snapshot save "$dir/etcd-backup-$TSTAMP.db" >&2
}

validate () {
  local dir=$1
  test -d "$dir" || return 2
  etcdctl \
    --cacert="$CACERT" \
    --cert="$CERT" \
    --key="$KEY" \
    snapshot status "$dir/etcd-backup-$TSTAMP.db" >&2
}

rotate () {
  local dir=$1
  test -d "$dir" || return 1
  (( "$LIMIT_DAYS_TO_KEEP" > 0 )) || return 0
  limit=$(date -d "-$LIMIT_DAYS_TO_KEEP days" -u +%Y%m%dT%H%M%SZ)
  while IFS= read -r file; do
    echo "Deleting: $file" >&2
    rm "$file" || return 1
  done < <(before "$limit" "$dir/etcd-backup-*.db")
}

fail() {
  local code=$1
  local message=$2
  echo "$message" >&2
  exit "$code"
}

snapshot "$DIR" || fail 2 "CRITICAL"
validate "$DIR" || fail 2 "CRITICAL"
rotate "$DIR" || fail 1 "WARNING"

echo "OK"
